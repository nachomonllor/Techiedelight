https://techiedelight.com/practice/?problem=MinimumSumSubarray

/*
Given an integer array and a positive integer `k`, find the minimum sum contiguous subarray of size `k`.

Input : nums[] = [10, 4, 2, 5, 6, 3, 8, 1], k = 3
Output: [4, 2, 5]

Input : nums[] = [1, 4, 5, 3, 8], k = 6
Output: [1, 4, 5, 3, 8]

Note: Since an input can contain several minimum sum subarrays of size `k`, the solution can return any one of them.

*/

class Solution
{
public:
	vector<int> findMinSumSubarray(vector<int> const &nums, int k)
	{

		int min_suma = INT_MAX;
		vector<int> list;
		vector<int> ventana;
		int suma = 0;

		for (int i = 0; i < nums.size() && i < k; i++)
		{
			suma += nums[i];
			ventana.push_back(nums[i]);
		}

		if (suma < min_suma)
		{
			min_suma = suma;
			list = ventana;
		}

		for (int i = 0; i + k < nums.size(); i++)
		{

			ventana.erase(ventana.begin());

			suma -= nums[i];
			ventana.push_back(nums[i + k]);
			suma += nums[i + k];

			if (suma < min_suma)
			{
				min_suma = suma;
				list = ventana;
			}
		}

		return list;

	}
};