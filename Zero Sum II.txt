https://techiedelight.com/practice/?problem=ZeroSumII
/*

Given an integer array, find all contiguous subarrays with zero-sum.

Input : [4, 2, -3, -1, 0, 4]
Output: {[-3, -1, 0, 4], [0]}

Input : [3, 4, -7, 3, 1, 3, 1, -4, -2, -2]
Output: {[3, 4, -7], [4, -7, 3], [-7, 3, 1, 3], [3, 1, -4], [3, 1, 3, 1, -4, -2, -2], [3, 4, -7, 3, 1, 3, 1, -4, -2, -2]}

Input : [0, 0]
Output: {[0], [0, 0]}

Input : [1, 2, 3]
Output: {}

Note: Since an input can have multiple subarrays with zero-sum, the solution should return a set containing all the distinct subarrays.

*/

class Solution
{
public:
	set<vector < int>> getAllZeroSumSubarrays(vector<int> const &nums)
	{
		set<vector < int>> subarrays;

		map<int, int> hash;

		int suma = 0;

		for (int i = 0; i < nums.size(); i++)
		{
			suma += nums[i];

			if (nums[i] == 0)
			{
				vector<int> v;
				v.push_back(0);
				subarrays.insert(v);
			}

			if (suma == 0)
			{
				vector<int> v;
				for (int j = 0; j <= i; j++)
				{
					v.push_back(nums[j]);
				}

				subarrays.insert(v);
			}

			if (hash.find(suma) != hash.end())
			{
				vector<int> v;

				for (int j = hash[suma] + 1; j <= i; j++)
				{
					v.push_back(nums[j]);
				}

				subarrays.insert(v);
			}

			hash[suma] = i;
		}

		return subarrays;

	}
};
